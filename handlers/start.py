from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from faker import Faker

from create_bot import bot
from db_work.db_commands import *
from keyboards.inline_kbs import *

start_router = Router()
reg_users = [user_username for user_username in config('REG_USERS').split(',')]

questions = {
    1: {'qst': '–°—Ç–æ–ª–∏—Ü–∞ –ò—Ç–∞–ª–∏–∏?', 'answer': '–†–∏–º'},
    2: {'qst': '–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?', 'answer': '–°–µ–º—å'},
    3: {'qst': '–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?', 'answer': '–ù–∏–ª'},
    4: {'qst': '–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º "O"?', 'answer': '–ö–∏—Å–ª–æ—Ä–æ–¥'},
    5: {'qst': '–ö–∞–∫ –∑–æ–≤—É—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∫–Ω–∏–≥–∏ "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä"?', 'answer': '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä'},
    6: {'qst': '–°–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –≤ —Ä–∞–¥—É–≥–µ?', 'answer': '–°–µ–º—å'},
    7: {'qst': '–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Ç—Ä–µ—Ç—å—è –æ—Ç –°–æ–ª–Ω—Ü–∞?', 'answer': '–ó–µ–º–ª—è'},
    8: {'qst': '–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª "–í–æ–π–Ω—É –∏ –º–∏—Ä"?', 'answer': '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π'},
    9: {'qst': '–ß—Ç–æ —Ç–∞–∫–æ–µ H2O?', 'answer': '–í–æ–¥–∞'},
    10: {'qst': '–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?', 'answer': '–¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω'},
}

type_eat = {
    0: '–ù–∏—á–µ–≥–æ',
    1: '–°—Ç–æ–ª–∏—Ü–∞ –ò—Ç–∞–ª–∏–∏?',
    2: '–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?',
    3: '–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?',
    4: '–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º "O"?',
    5: '–ö–∞–∫ –∑–æ–≤—É—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∫–Ω–∏–≥–∏ "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä"?',
    6: '–°–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –≤ —Ä–∞–¥—É–≥–µ?'
}


# @start_router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart()',
#                          reply_markup=main_kb(message.from_user.id))
#
# @start_router.message(Command('start_2'))
# async def cmd_start(message: Message):
#     await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_2 –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä Command()',
#                          reply_markup=create_spec_kb())
#
# @start_router.message(F.text == '/start_3')
# async def cmd_start(message: Message):
#     await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_3 –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.text!',
#                          reply_markup=create_rat())
#
# @start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
# async def get_inline_btn_link(message: Message):
#     await message.answer('–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!', reply_markup=get_inline_kb())
#
# @start_router.callback_query(F.data == 'get_person')
# async def send_random_person(call: CallbackQuery):
#     # await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
#     user = Faker('ru_RU').name()
#     await call.message.answer(user)
#     await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=False)
#
# @start_router.callback_query(F.data == 'back_home')
# async def get_back_home(call: CallbackQuery):
#     await call.message.answer('–û–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω—É—é',
#                          reply_markup=main_kb(call.message.from_user.id))
#     await call.answer('–í–æ–∑–≤—Ä–∞—â–∞—é', show_alert=True)

# @start_router.callback_query(F.data.startswith('qst_'))
# async def cmd_start(call: CallbackQuery):
#     await call.answer()
#     qst_id = int(call.data.replace('qst_', ''))
#     qst_data = questions[qst_id]
#     msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
#                f'<b>{qst_data.get("answer")}</b>\n\n' \
#                f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
#     async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
#         await asyncio.sleep(2)
#         await call.message.answer(msg_text, reply_markup=create_qst_inline_kb(questions))


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    if message.from_user.username not in reg_users:
        await message.answer('üçè–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!\n\n'
                             '–¢—ã –ø–æ–ø–∞–ª –≤ <b>¬´–õ–∞–Ω—á–ë–æ—Çü•û¬ª</b> ‚Äì —Ç–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ —à–∫–æ–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏!\n\n'
                             'üìÖ<b>–í—ã–±–∏—Ä–∞–π –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏–ª–∏ –ø–æ–ª–¥–Ω–∏–∫</b> ‚Äì –∏ –≤—Å—ë —Å–∞–º–æ –∑–∞–ø–∏—à–µ—Ç—Å—è.\n'
                             'üìã<b>–°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</b> –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n'
                             '‚è∞<b>–£—Å–ø–µ–≤–∞–π –æ—Ç–º–µ–Ω–∏—Ç—å</b>, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª!\n\n'
                             'üìù<b>–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è?</b> –≠—Ç–æ –±—ã—Å—Ç—Ä–æ!\n'
                             'üëâ–ñ–º–∏ <b>¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª</b> –∏ –Ω–∞—á–∏–Ω–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!\n\n'
                             '‚ùì <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b> –ù–∞–ø–∏—à–∏ /help, –∏ —è –ø–æ–º–æ–≥—É!\n', reply_markup=register_kb())
    else:
        await message.answer('üëãüèª <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É —à–∫–æ–ª—å–Ω–æ–π –µ–¥—ã!</b>\n\n'
                             'üßÉ <b>–•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ –∏–ª–∏ –æ–±–µ–¥?</b> –ù–∞–∂–∏–º–∞–π "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ –≤—ã–±–∏—Ä–∞–π!\n'
                             'üìã <b>–°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</b> –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n'
                             '‚è∞ <b>–£—Å–ø–µ–≤–∞–π –æ—Ç–º–µ–Ω–∏—Ç—å</b>, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª!\n'
                             'üçù <b>–ù–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–∞—é—Ç –≤ —Å—Ç–æ–ª–æ–≤–æ–π?</b> –í–∑–≥–ª—è–Ω–∏ –Ω–∞ –º–µ–Ω—é!\n\n'
                             '‚ùì <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b> –ù–∞–ø–∏—à–∏ /help, –∏ —è –ø–æ–º–æ–≥—É!\n'
                             'üçï <i>–ü—É—Å—Ç—å –≤ —Å—Ç–æ–ª–æ–≤–æ–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∫—É—Å–Ω–æ!</i>',
                             reply_markup=main_menu_kb(message.from_user.username))


@start_router.callback_query(F.data == 'reg')
async def get_user_info(call: CallbackQuery):
    await bot.send_message(call.message.chat.id, '–ù–∞–∑–æ–≤–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –§–ò–û. –•–æ—Ç–∏–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üëê\n'
                                                 '–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å —Å –ª–∏—Ç–µ—Ä–æ–π –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n'
                                                 f'–ü—Ä–∏–º–µ—Ä: "{Faker("ru_RU").name()} 11 –ê"')


@start_router.message(F.text)
async def next_step(message: Message):
    info = message.text.strip().split()
    username, name, grade, liter = message.from_user.username, f'{info[0]} {info[1]} {info[2]}', info[3], info[4]
    print(username, name, grade, liter)
    insert_info_users(username, name, grade, liter)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ü–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ?üòâ', reply_markup=get_to_main_menu())


@start_router.callback_query(F.data == 'back_home')
async def main_menu(call: CallbackQuery):
    await call.message.answer('üëãüèª <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É —à–∫–æ–ª—å–Ω–æ–π –µ–¥—ã!</b>\n\n'
                              'üßÉ <b>–•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ –∏–ª–∏ –æ–±–µ–¥?</b> –ù–∞–∂–∏–º–∞–π "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ –≤—ã–±–∏—Ä–∞–π!\n'
                              'üìã <b>–°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</b> –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n'
                              '‚è∞ <b>–£—Å–ø–µ–≤–∞–π –æ—Ç–º–µ–Ω–∏—Ç—å</b>, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª!\n'
                              'üçù <b>–ù–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–∞—é—Ç –≤ —Å—Ç–æ–ª–æ–≤–æ–π?</b> –í–∑–≥–ª—è–Ω–∏ –Ω–∞ –º–µ–Ω—é!\n\n'
                              '‚ùì <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b> –ù–∞–ø–∏—à–∏ /help, –∏ —è –ø–æ–º–æ–≥—É!\n'
                              'üçï <i>–ü—É—Å—Ç—å –≤ —Å—Ç–æ–ª–æ–≤–æ–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∫—É—Å–Ω–æ!</i>',
                              reply_markup=main_menu_kb(call.from_user.username))
    await call.answer('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üí§', show_alert=False)


@start_router.callback_query(F.data == 'make_order')
async def make_order_qst(call: CallbackQuery):
    await call.message.answer('–ö–∞–∫–æ–π —É —Ç–µ–±—è –∑–∞–∫–∞–∑? üíÅüèª‚Äç‚ôÄÔ∏è', reply_markup=order_variants())
    await call.answer()


@start_router.callback_query(F.data.startswith('ord_'))
async def make_order(call: CallbackQuery):
    ords = int(F.data[4:])
    insert_info_orders(call.from_user.username, ords)
    await call.message.answer('–û—Ç–ª–∏—á–Ω–æ! –ö—É–¥–∞ –¥–∞–ª—å—à–µ? üëÄ', reply_markup=cancel_or_get_to_main_menu())
    await call.answer()
