from datetime import timedelta

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from faker import Faker
from sqlalchemy import create_engine, exists
from sqlalchemy.orm import sessionmaker

from create_bot import bot
from db_work.db_commands import *
from keyboards.inline_kbs import *

start_router = Router()

eng = create_engine('sqlite:///data/list_of_students.db')
Session = sessionmaker(bind=eng)
session = Session()

@start_router.message(F.text == '/help')
async def cmd_help(message: Message):
    await message.answer('üí¨ <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ú—ã –Ω–∞ —Å–≤—è–∑–∏!</b>\n\n'
                         '–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–∏—à–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é –õ–∞–Ω—á–ë–æ—Ç–∞ üëâ @by_gelya',
                         reply_markup=get_to_main_menu())

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    if not session.query(exists().where(User.username == message.from_user.username)).scalar():
        await message.answer('üçè–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!\n\n'
                             '–¢—ã –ø–æ–ø–∞–ª –≤ <b>¬´–õ–∞–Ω—á–ë–æ—Çü•û¬ª</b> ‚Äì —Ç–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ —à–∫–æ–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏!\n\n'
                             'üìÖ<b>–í—ã–±–∏—Ä–∞–π –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏–ª–∏ –ø–æ–ª–¥–Ω–∏–∫</b> ‚Äì –∏ –≤—Å—ë —Å–∞–º–æ –∑–∞–ø–∏—à–µ—Ç—Å—è.\n'
                             'üìã<b>–°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</b> –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n'
                             '‚è∞<b>–£—Å–ø–µ–≤–∞–π –æ—Ç–º–µ–Ω–∏—Ç—å</b>, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª!\n\n'
                             'üìù<b>–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è?</b> –≠—Ç–æ –±—ã—Å—Ç—Ä–æ!\n'
                             'üëâ–ñ–º–∏ <b>¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª</b> –∏ –Ω–∞—á–∏–Ω–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!\n\n'
                             '‚ùì <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b> –ù–∞–ø–∏—à–∏ /help, –∏ —è –ø–æ–º–æ–≥—É!\n', reply_markup=register_kb())
    else:
        await message.answer('üëãüèª <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É —à–∫–æ–ª—å–Ω–æ–π –µ–¥—ã!</b>\n\n'
                             'üßÉ <b>–•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ –∏–ª–∏ –æ–±–µ–¥?</b> –ù–∞–∂–∏–º–∞–π "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ –≤—ã–±–∏—Ä–∞–π!\n'
                             'üìã <b>–°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</b> –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n'
                             '‚è∞ <b>–£—Å–ø–µ–≤–∞–π –æ—Ç–º–µ–Ω–∏—Ç—å</b>, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª!\n'
                             'üçù <b>–ù–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–∞—é—Ç –≤ —Å—Ç–æ–ª–æ–≤–æ–π?</b> –í–∑–≥–ª—è–Ω–∏ –Ω–∞ –º–µ–Ω—é!\n\n'
                             '‚ùì <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b> –ù–∞–ø–∏—à–∏ /help, –∏ —è –ø–æ–º–æ–≥—É!\n'
                             'üçï <i>–ü—É—Å—Ç—å –≤ —Å—Ç–æ–ª–æ–≤–æ–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∫—É—Å–Ω–æ!</i>',
                             reply_markup=main_menu_kb(message.from_user.username))


@start_router.callback_query(F.data == 'reg')
async def get_user_info(call: CallbackQuery):
    await bot.send_message(call.message.chat.id, '–ù–∞–∑–æ–≤–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –§–ò–û. –•–æ—Ç–∏–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üëê\n'
                                                 '–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å —Å –ª–∏—Ç–µ—Ä–æ–π –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n'
                                                 f'–ü—Ä–∏–º–µ—Ä: "{Faker("ru_RU").name()} 11 –ê"')


@start_router.message(F.text)
async def next_step(message: Message):
    info = message.text.strip().split()
    username, name, grade, liter = message.from_user.username, f'{info[0]} {info[1]} {info[2]}', info[3], info[4]
    print(username, name, grade, liter)
    insert_info_users(username, name, grade, liter)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ü–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ?üòâ', reply_markup=get_to_main_menu())


@start_router.callback_query(F.data == 'back_home')
async def main_menu(call: CallbackQuery):
    await call.message.answer('üëãüèª <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É —à–∫–æ–ª—å–Ω–æ–π –µ–¥—ã!</b>\n\n'
                              'üßÉ <b>–•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ –∏–ª–∏ –æ–±–µ–¥?</b> –ù–∞–∂–∏–º–∞–π "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ –≤—ã–±–∏—Ä–∞–π!\n'
                              'üìã <b>–°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</b> –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n'
                              '‚è∞ <b>–£—Å–ø–µ–≤–∞–π –æ—Ç–º–µ–Ω–∏—Ç—å</b>, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª!\n'
                              'üçù <b>–ù–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–∞—é—Ç –≤ —Å—Ç–æ–ª–æ–≤–æ–π?</b> –í–∑–≥–ª—è–Ω–∏ –Ω–∞ –º–µ–Ω—é!\n\n'
                              '‚ùì <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b> –ù–∞–ø–∏—à–∏ /help, –∏ —è –ø–æ–º–æ–≥—É!\n'
                              'üçï <i>–ü—É—Å—Ç—å –≤ —Å—Ç–æ–ª–æ–≤–æ–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∫—É—Å–Ω–æ!</i>',
                              reply_markup=main_menu_kb(call.from_user.username))
    await call.answer('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üí§', show_alert=False)


@start_router.callback_query(F.data == 'make_order')
async def make_order_qst(call: CallbackQuery):
    await call.message.answer('–ö–∞–∫–æ–π —É —Ç–µ–±—è –∑–∞–∫–∞–∑? üíÅüèª‚Äç‚ôÄÔ∏è', reply_markup=order_variants())
    await call.answer()


@start_router.callback_query(F.data.startswith('ord_'))
async def make_order(call: CallbackQuery):
    cancel_order(call.from_user.username)
    ords = int(call.data[4:])
    insert_info_orders(call.from_user.username, ords)
    await call.message.answer('–û—Ç–ª–∏—á–Ω–æ! –ö—É–¥–∞ –¥–∞–ª—å—à–µ? üëÄ', reply_markup=cancel_or_get_to_main_menu())
    await call.answer()

@start_router.callback_query(F.data == 'current_menu')
async def menu_showing(call: CallbackQuery):
    file = FSInputFile(path='all_media/menu.docx')
    await call.message.answer('–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª–∏–∫! –ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üíå')
    await call.answer()
    await call.message.answer_document(document=file, reply_markup=get_to_main_menu(),
                                    caption='–õ–æ–≤–∏! üôåüèª')


@start_router.callback_query(F.data == 'my_order')
async def show_order(call: CallbackQuery):
    now = datetime.now()
    if now.hour > 16:
        date = now + timedelta(days=1)
    else:
        date = now
    date = date.strftime("%d.%m.%Y")
    user_name = str(call.from_user.first_name)
    if get_active_orders(call.from_user.username) != '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤! üçΩ':
        order = str(get_active_orders(call.from_user.username)[0][1])
    else:
        order = str(get_active_orders(call.from_user.username))
    await call.message.answer(f'<i>–í–æ—Ç —Ç–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ {date}, {user_name}!</i> ü§ó\n\n'
                              f'<code>{order}</code> \n\n'
                              'ü§î <b>–•–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –ø–æ–π–¥–µ—à—å –≤ —à–∫–æ–ª—É, –∏–ª–∏ –ø–æ–Ω—è–ª, –Ω–µ —Ö–æ—á–µ—à—å –µ—Å—Ç—å?</b> –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"!\n\n'
                              'ü§≥üèº <b>–ü–µ—Ä–µ–¥—É–º–∞–ª –Ω–∞—Å—á—ë—Ç —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞?</b> –°–Ω–æ–≤–∞ —Å–¥–µ–ª–∞–π –∑–∞–∫–∞–∑, –æ–Ω –∏–∑–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!',
                              reply_markup=my_order())
    await call.answer()


@start_router.callback_query(F.data == 'delete_order')
async def delete_order(call: CallbackQuery):
    cancel_order(call.from_user.username)
    await call.message.answer('–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω! ü•¢', reply_markup=get_out_after_cancel())
    await call.answer()


@start_router.callback_query(F.data == 'admin')
async def admin_only(call: CallbackQuery):
    data = ex_classes()
    existing_classes = ''
    if data != '–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ ‚ùå':
        for i in range(len(data) - 1):
            if data[i][:3] == data[i + 1][:3]:
                existing_classes = '\n'.join(data)
            else:
                existing_classes = '\n\n'.join(data)
        print(existing_classes)
        # await call.message.answer(existing_classes)
        await call.message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–∞–≤—à–∏—Ö! üìã', reply_markup=get_to_main_menu())
        await call.answer()
    else:
        await call.message.answer('–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ ‚ùå', reply_markup=get_to_main_menu())
        await call.answer()
