import telebot
from telebot import types, callback_data
import sqlite3
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot('7280605209:AAH6JW03UpB9qjUf9FRhwwLxlqVTIY7_uGg')
status_keyboard = telebot.types.InlineKeyboardMarkup().add(
    telebot.types.InlineKeyboardButton('–£—á–µ–Ω–∏–∫', callback_data='1'),
    telebot.types.InlineKeyboardButton('–£—á–∏—Ç–µ–ª—å', callback_data='2'))


@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('list_of_students.sql')
    cur = conn.cursor()
    cur.execute(
        'CREATE TABLE IF NOT EXISTS users(id int auto_increment primary key, status int, name varchar(100), class varchar(3))')
    conn.commit()

    register = telebot.types.InlineKeyboardMarkup()
    register.add(telebot.types.InlineKeyboardButton('‚úç–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='users'))
    bot.send_message(
        message.chat.id, "üçè–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥\!"
                         "–¢—ã –ø–æ–ø–∞–ª –≤ *¬´–õ–∞–Ω—á–ë–æ—Çü•û¬ª* ‚Äì —Ç–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ —à–∫–æ–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏\!"
                         "üìÖ*–í—ã–±–∏—Ä–∞–π –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏–ª–∏ –ø–æ–ª–¥–Ω–∏–∫* ‚Äì –∏ –≤—Å—ë —Å–∞–º–æ –∑–∞–ø–∏—à–µ—Ç—Å—è\."
                         "üìã*–°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã* –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\."
                         "‚è∞*–£—Å–ø–µ–≤–∞–π –æ—Ç–º–µ–Ω–∏—Ç—å*, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª\!"
                         "üìù*–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è\?* –≠—Ç–æ –±—ã—Å—Ç—Ä–æ\!"
                         "üëâ–ñ–º–∏ *¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª* –∏ –Ω–∞—á–∏–Ω–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\!"
                         "‚ùì *–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã\?* –ù–∞–ø–∏—à–∏ /help, –∏ —è –ø–æ–º–æ–≥—É\!",
        parse_mode='MarkdownV2', reply_markup=register
    )
    cur.close()
    conn.close()


@bot.callback_query_handler(func=lambda call: True)
def classification_of_users(call: types.CallbackQuery):
    bot.send_message(call.message.chat.id, '–í—ã —É—á–∏—Ç–µ–ª—å –∏–ª–∏ —É—á–µ–Ω–∏–∫?', reply_markup=status_keyboard)
    if call.data == '1':
        logging.info(call.data)
        # bot.register_next_step_handler(call.message, pupil)
    if call.data == '2':
        logging.info(call.data)
        teacher(call)

# –°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑—Ä–∞—â–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–º–µ–Ω–∏, –∫–ª–∞—Å—Å–∞ –∏ —Ç–ø

def pupil(call: types.CallbackQuery):
    logging.info(call)
    bot.send_message(call.message.chat.id, '–ù–∞–∑–æ–≤–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –§–ò–û. –•–æ—Ç–∏–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üëê')

    name = call.message.text.strip()
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å —Å –ª–∏—Ç–µ—Ä–æ–π –∫–ª–∞—Å—Å–∞. –ü—Ä–∏–º–µ—Ä: "11–ê"')

    clas = call.message.text.strip().upper()

    conn = sqlite3.connect('list_of_students.sql')
    cur = conn.cursor()
    cur.execute('INSERT INTO users (status, name, class) VALUES ("%s", "%s", "%s")' % ('1', name, clas))
    conn.commit()

    bot.register_next_step_handler(call.message, main)


def teacher(call: types.CallbackQuery):
    bot.send_message(call.message.chat.id, '–ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –§–ò–û')

    name = call.message.text.strip()
    bot.send_message(call.message.chat.id, '–ö–∞–∫–∏–º –∫–ª–∞—Å—Å–æ–º –≤—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ? –ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∏ –ª–∏—Ç–µ—Ä—É –∫–ª–∞—Å—Å–∞. –ü—Ä–∏–º–µ—Ä: "11–ê"')

    clas = call.message.text.strip().upper()

    conn = sqlite3.connect('list_of_students.sql')
    cur = conn.cursor()
    cur.execute('INSERT INTO users (status, name, class) VALUES ("%s", "%s", "%s")' % ('2', name, clas))
    conn.commit()

    bot.register_next_step_handler(call.message, main)


@bot.callback_query_handler(func=lambda call: True)
def main(call: types.CallbackQuery):
    pass


bot.polling(none_stop=True)
